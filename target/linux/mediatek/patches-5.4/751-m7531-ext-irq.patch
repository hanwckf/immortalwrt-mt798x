--- a/drivers/net/phy/mtk/mt753x/mt753x_common.c	2023-03-07 00:22:57.479706000 +0800
+++ b/drivers/net/phy/mtk/mt753x/mt753x_common.c	2023-03-07 10:46:18.601420368 +0800
@@ -6,10 +6,23 @@
 
 #include <linux/kernel.h>
 #include <linux/delay.h>
-
+#include <linux/time.h>
+#include <linux/timex.h>
+#include <linux/proc_fs.h>
+#include <linux/ktime.h>
 #include "mt753x.h"
 #include "mt753x_regs.h"
+
+
+static struct proc_dir_entry *proc_dir = NULL;
+static struct proc_dir_entry *proc_link_dir = NULL;
+#define MT753X_GSW_DIR "mtk_gsw"
+#define MT753X_GSW_LINK_ENTRY "link_time_stamp"
+__kernel_time_t link_sec[MT753X_NUM_PORTS];
+__kernel_time_t ext_link = 0;
 
+int mtk_soc_mmd_read(int phyad, int devad, int regad);
+void mtk_soc_mmd_write(int phyad, int devad, int regad, int val);
 void mt753x_irq_enable(struct gsw_mt753x *gsw)
 {
 	u32 val;
@@ -31,7 +44,7 @@
 {
 	u32 pmsr, speed_bits;
 	const char *speed;
-
+	struct timespec64 tp;
 	pmsr = mt753x_reg_read(gsw, PMSR(port));
 
 	speed_bits = (pmsr & MAC_SPD_STS_M) >> MAC_SPD_STS_S;
@@ -53,9 +66,17 @@
 
 	if (pmsr & MAC_LNK_STS) {
 		dev_info(gsw->dev, "Port %d Link is Up - %s/%s\n",
-			 port, speed, (pmsr & MAC_DPX_STS) ? "Full" : "Half");
+			port, speed, (pmsr & MAC_DPX_STS) ? "Full" : "Half");
+		ktime_get_boottime_ts64(&tp);
+		if (port < MT753X_NUM_PORTS)
+		{
+			link_sec[port] = tp.tv_sec + (tp.tv_nsec ? 1 : 0);
+		}
 	} else {
-		dev_info(gsw->dev, "Port %d Link is Down\n", port);
+		if (port < MT753X_NUM_PORTS)
+		{
+			link_sec[port] = 0;
+		}
 	}
 }
 
@@ -88,3 +109,75 @@
 
 	enable_irq(gsw->irq);
 }
+
+void mt753x_ext_phy_irq_worker(struct work_struct *work)
+{
+    struct gsw_mt753x *gsw;
+    int val = 0;
+    struct timespec64 tp;
+    gsw = container_of(work, struct gsw_mt753x, ext_irq_worker);
+    mtk_soc_mmd_read(7, 31, 0xA4D4);
+    val = mtk_soc_mmd_read(7, 31, 0xA434);
+    if (val & 0x4)
+    {
+        dev_info(gsw->dev, "Port %d Link is Up\n", 5);
+        ktime_get_boottime_ts64(&tp);
+        ext_link = tp.tv_sec + (tp.tv_nsec ? 1 : 0);
+    }
+    else
+    {
+        dev_info(gsw->dev, "Port %d Link is Down\n", 5);
+        ext_link = 0;
+    }
+    enable_irq(gsw->ext_phy_irq);
+}
+ 
+static int link_time_stamp_read(struct seq_file *seq, void *v)
+{
+    int i = 0;
+    for (i = 0; i < MT753X_NUM_PORTS; i++)
+    {
+		if (i != 5)
+       {
+            seq_printf(seq, "%ld ", link_sec[i]);
+        }
+        else
+        {
+            seq_printf(seq, "%ld ", ext_link);
+        }
+	}
+    return 0;
+}
+
+static int link_time_stamp_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, link_time_stamp_read, 0);
+}
+
+static const struct file_operations mt753x_link_stamp_fops = {
+    .owner = THIS_MODULE,
+    .open = link_time_stamp_open,
+    .read = seq_read,
+    .llseek = seq_lseek,
+    .release = single_release};
+
+int mt753x_debug_proc_init(void)
+{
+
+    if (!proc_dir)
+        proc_dir = proc_mkdir(MT753X_GSW_DIR, NULL);
+
+    proc_link_dir =
+        proc_create(MT753X_GSW_LINK_ENTRY, 0, proc_dir, &mt753x_link_stamp_fops);
+
+    if (!proc_link_dir)
+        printk("!! FAIL to create %s PROC !!\n", MT753X_GSW_LINK_ENTRY);
+
+    return 0;
+}
+
+void mt753x_debug_proc_exit(void)
+{
+    if (proc_dir)
+        remove_proc_entry(MT753X_GSW_DIR, proc_dir);
+}

--- a/drivers/net/phy/mtk/mt753x/mt753x.h	2023-03-07 03:27:42.925587000 +0800
+++ b/drivers/net/phy/mtk/mt753x/mt753x.h	2023-03-07 10:27:40.846233008 +0800
@@ -81,9 +81,10 @@
 	int phy_link_sts;
 
 	int irq;
+	int ext_phy_irq;
 	int reset_pin;
 	struct work_struct irq_worker;
-
+	struct work_struct ext_irq_worker;
 #ifdef CONFIG_SWCONFIG
 	struct switch_dev swdev;
 	u32 cpu_port;
@@ -142,13 +143,14 @@
 
 void mt753x_irq_worker(struct work_struct *work);
 void mt753x_irq_enable(struct gsw_mt753x *gsw);
-
+void mt753x_ext_phy_irq_worker(struct work_struct *work);
 int mt753x_phy_calibration(struct gsw_mt753x *gsw, u8 phyaddr);
 int extphy_init(struct gsw_mt753x *gsw, int addr);
 
 int mt753x_phy_calibration(struct gsw_mt753x *gsw, u8 phyaddr);
 int extphy_init(struct gsw_mt753x *gsw, int addr);
-
+int mt753x_debug_proc_init(void);
+void mt753x_debug_proc_exit(void);
 /* MDIO Indirect Access Registers */
 #define MII_MMD_ACC_CTL_REG		0x0d
 #define MMD_CMD_S			14

--- a/drivers/net/phy/mtk/mt753x/mt753x_mdio.c	2023-03-07 00:22:57.479706000 +0800
+++ b/drivers/net/phy/mtk/mt753x/mt753x_mdio.c	2023-03-07 10:51:15.679805023 +0800
@@ -29,7 +29,8 @@
 static u32 mt753x_id;
 struct list_head mt753x_devs;
 static DEFINE_MUTEX(mt753x_devs_lock);
-
+int mtk_soc_mmd_read(int phyad, int devad, int regad);
+void mtk_soc_mmd_write(int phyad, int devad, int regad, int val);
 static struct mt753x_sw_id *mt753x_sw_ids[] = {
 	&mt7530_id,
 	&mt7531_id,
@@ -691,6 +692,17 @@
 	return IRQ_HANDLED;
 }
 
+static irqreturn_t mt753x_ext_phy_irq_handler(int irq, void *dev)
+{
+    struct gsw_mt753x *gsw = dev;
+
+    disable_irq_nosync(gsw->ext_phy_irq);
+
+    schedule_work(&gsw->ext_irq_worker);
+
+    return IRQ_HANDLED;
+}
+
 static int mt753x_probe(struct platform_device *pdev)
 {
 	struct gsw_mt753x *gsw;
@@ -777,7 +789,35 @@
 
 		INIT_WORK(&gsw->irq_worker, mt753x_irq_worker);
 	}
-
+#if defined(CONFIG_NET_MEDIATEK_EXT_PHY_RTL822X)
+    if (mtk_soc_mmd_read(7, 1, 2) == 0x1C && (mtk_soc_mmd_read(7, 1, 3) & 0xFF00) == 0xC800)
+    {
+        mtk_soc_mmd_write(7, 31, 0xA4D2, 0);
+        mtk_soc_mmd_write(7, 31, 0xE402, 0);
+        mtk_soc_mmd_read(7, 31, 0xA4D4);
+        mtk_soc_mmd_read(7, 31, 0xE404);
+
+        dev_info(gsw->dev, "PHY is Realtek 822x, attach its IRQ\n");
+        gsw->ext_phy_irq = platform_get_irq(pdev, 1);
+        if (gsw->ext_phy_irq >= 0)
+        {
+            ret = devm_request_irq(gsw->dev, gsw->ext_phy_irq, mt753x_ext_phy_irq_handler,
+                                   0, "rtl822x_irq", gsw);
+            if (ret)
+            {
+                dev_err(gsw->dev, "Failed to request ext_phy_irq %d\n",
+                        gsw->ext_phy_irq);
+                goto fail;
+            }
+            else
+            {
+                dev_info(gsw->dev, "IRQ %d attached!\n", gsw->ext_phy_irq);
+            }
+            
+            INIT_WORK(&gsw->ext_irq_worker, mt753x_ext_phy_irq_worker);
+        }
+    }
+#endif
 	platform_set_drvdata(pdev, gsw);
 
 	gsw->phy_status_poll =
@@ -789,7 +829,7 @@
 #endif
 
 	mt753x_nl_init();
-
+	mt753x_debug_proc_init();
 	mt753x_swconfig_init(gsw);
 
 	if (sw->post_init)
@@ -797,7 +837,10 @@
 
 	if (gsw->irq >= 0)
 		mt753x_irq_enable(gsw);
-
+	#if defined(CONFIG_NET_MEDIATEK_EXT_PHY_RTL822X)
+	if (gsw->ext_phy_irq >= 0)
+        mtk_soc_mmd_write(7, 31, 0xA4D2, 0x30);
+	#endif
 	return 0;
 
 fail:
@@ -812,7 +855,8 @@
 
 	if (gsw->irq >= 0)
 		cancel_work_sync(&gsw->irq_worker);
-
+	if (gsw->ext_phy_irq >= 0)
+        cancel_work_sync(&gsw->ext_irq_worker);
 	if (gsw->reset_pin >= 0)
 		devm_gpio_free(&pdev->dev, gsw->reset_pin);
 
@@ -827,7 +871,7 @@
 #endif
 
 	mt753x_nl_exit();
-
+	mt753x_debug_proc_exit();
 	mt753x_remove_gsw(gsw);
 
 	platform_set_drvdata(pdev, NULL);
