--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -1729,7 +1729,7 @@ static int mtk_poll_rx(struct napi_struc
 			goto release_desc;
 
 		/* alloc new buffer */
-		new_data = napi_alloc_frag(ring->frag_size);
+		new_data = kmalloc(ring->frag_size, GFP_ATOMIC);
 		if (unlikely(!new_data)) {
 			netdev->stats.rx_dropped++;
 			goto release_desc;
@@ -1740,7 +1740,7 @@ static int mtk_poll_rx(struct napi_struc
 					  ring->buf_size,
 					  DMA_FROM_DEVICE);
 		if (unlikely(dma_mapping_error(eth->dev, dma_addr))) {
-			skb_free_frag(new_data);
+			kfree(new_data);
 			netdev->stats.rx_dropped++;
 			goto release_desc;
 		}
@@ -1753,9 +1753,9 @@ static int mtk_poll_rx(struct napi_struc
 				 ring->buf_size, DMA_FROM_DEVICE);
 
 		/* receive data */
-		skb = build_skb(data, ring->frag_size);
+		skb = build_skb(data, 0);
 		if (unlikely(!skb)) {
-			skb_free_frag(data);
+			kfree(data);
 			netdev->stats.rx_dropped++;
 			goto skip_rx;
 		}
@@ -2206,7 +2206,7 @@ static int mtk_rx_alloc(struct mtk_eth *
 		return -ENOMEM;
 
 	for (i = 0; i < rx_dma_size; i++) {
-		ring->data[i] = netdev_alloc_frag(ring->frag_size);
+		ring->data[i] = kmalloc(ring->frag_size, GFP_ATOMIC);
 		if (!ring->data[i])
 			return -ENOMEM;
 	}
@@ -2310,7 +2310,7 @@ static void mtk_rx_clean(struct mtk_eth
 					 (u64)(rxd->rxd1 | addr64),
 					 ring->buf_size,
 					 DMA_FROM_DEVICE);
-			skb_free_frag(ring->data[i]);
+			kfree(ring->data[i]);
 		}
 		kfree(ring->data);
 		ring->data = NULL;
